Function GetAttachment_FillingGly(Optional targetDay As Date) As String
    Dim olApp As Object, olNs As Object, olFolder As Object
    Dim olItems As Object, olMail As Object, olAtmt As Object
    Dim fileName As String, savePath As String
    Dim xlApp As Object, wb As Object, ws As Object
    
    fileName = "Daily Report Production Filling Glycerin Plant September 2025.xlsx"
    savePath = Environ("TEMP") & "\" & fileName
    If targetDay = 0 Then targetDay = Date
    
    Debug.Print "=== LOG GetAttachment_FillingGly ==="
    Debug.Print "Target Date : " & Format(targetDay, "dd-mmm-yyyy")
    Debug.Print "Save Path   : " & savePath
    
    ' Pastikan Outlook aktif
    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    On Error GoTo 0
    If olApp Is Nothing Then
        Debug.Print "ERROR: Outlook tidak terbuka!"
        Exit Function
    End If
    
    Set olNs = olApp.GetNamespace("MAPI")
    Set olFolder = olNs.GetDefaultFolder(6) ' Inbox
    Set olItems = olFolder.Items
    olItems.Sort "ReceivedTime", True
    
    For Each olMail In olItems
        If TypeName(olMail) = "MailItem" Then
            If Int(olMail.ReceivedTime) = Int(targetDay) Then
                Debug.Print "Cek Mail: " & olMail.SenderName & " | " & olMail.Subject
                
                If (InStr(1, olMail.SenderName, "Hani Wulandari", vbTextCompare) > 0) _
                Or (InStr(1, olMail.SenderName, "Wendy Fadillah Nugraha", vbTextCompare) > 0) Then
                    
                    Debug.Print ">> Email pengirim sesuai kriteria"
                    
                    For Each olAtmt In olMail.Attachments
                        Debug.Print "   - Attachment: " & olAtmt.fileName
                        
                        ' Pencocokan fleksibel nama file
                        If InStr(1, olAtmt.fileName, "Filling Glycerin", vbTextCompare) > 0 Then
                            Debug.Print ">> Cocok! Simpan ke: " & savePath
                            
                            ' Hapus file lama kalau ada
                            On Error Resume Next
                            Kill savePath
                            On Error GoTo 0
                            
                            ' Simpan attachment
                            olAtmt.SaveAsFile savePath
                            Debug.Print "SUCCESS: Attachment disimpan!"
                            
                            ' === Tambahan: convert ke value only di background ===
                            On Error Resume Next
                            Set xlApp = CreateObject("Excel.Application")
                            On Error GoTo 0
                            If xlApp Is Nothing Then
                                Debug.Print "ERROR: Tidak bisa buka Excel instance!"
                                GetAttachment_FillingGly = savePath
                                Exit Function
                            End If
                            
                            xlApp.Visible = False
                            xlApp.DisplayAlerts = False
                            Set wb = xlApp.Workbooks.Open(savePath, ReadOnly:=False)
                            
                            For Each ws In wb.Worksheets
                                ws.UsedRange.Value = ws.UsedRange.Value
                            Next
                            
                            wb.Close SaveChanges:=True
                            xlApp.Quit
                            
                            Set wb = Nothing
                            Set xlApp = Nothing
                            ' ========================================
                            
                            GetAttachment_FillingGly = savePath
                            Exit Function
                        End If
                    Next
                End If
            End If
        End If
    Next
    
    ' Kalau tidak ketemu
    Debug.Print "WARNING: Attachment tidak ditemukan."
    GetAttachment_FillingGly = ""
End Function




' ====================================================
' Sub Utama: GetFillingGlycerine (versi fix merge cell + copy value background)
' ====================================================
Sub GetFillingGlycerine()
    On Error GoTo ErrHandler
    
    Dim tempFile As String
    Dim xlApp As Object, xlWb As Object, xlWs As Object
    Dim wsDest As Worksheet
    Dim targetDay As Date, searchValueDate As Date
    Dim lastDataRow As Long
    Dim row As Long
    Dim volumeProduct As Double
    Dim matchingRows As Collection
    Dim r As Variant
    Dim sheetName As String
    Dim plantLabel As String
    
    plantLabel = "Filling Glycerin Plant"
    
    ' ==== inisialisasi ====
    targetDay = Date - 2
    searchValueDate = targetDay
    sheetName = Format(searchValueDate, "dd")
    
    ' ==== ambil file lampiran (sudah otomatis value only) ====
    tempFile = GetAttachment_FillingGly(searchValueDate)
    If tempFile = "" Then
        MsgBox "File Filling Glycerine tidak ditemukan.", vbExclamation
        Exit Sub
    End If
    
    ' ==== buka excel sumber (read only) ====
    Set xlApp = CreateObject("Excel.Application")
    xlApp.Visible = False
    Set xlWb = xlApp.Workbooks.Open(tempFile, ReadOnly:=True)
    
    ' ==== buat worksheet tujuan ====
    On Error Resume Next
    Set wsDest = ThisWorkbook.Sheets(sheetName)
    If wsDest Is Nothing Then
        Set wsDest = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsDest.Name = sheetName
    End If
    On Error GoTo ErrHandler
    
    row = 1
    
    ' ==== loop sheet sumber ====
    For Each xlWs In xlWb.Sheets
        If InStr(1, LCase(xlWs.Name), "daily report", vbTextCompare) > 0 Then
            Debug.Print "Sheet ditemukan: " & xlWs.Name
            
            lastDataRow = xlWs.Cells(xlWs.Rows.Count, 1).End(xlUp).row
            
            ' === cari baris sesuai tanggal (fungsi handle merge) ===
            Set matchingRows = GetMatchingRowsByDate(xlWs, targetDay)
            Debug.Print "Tanggal dicari: " & targetDay & _
                        " | Jumlah baris cocok: " & matchingRows.Count
            
            ' === ambil setiap baris hasil ===
For Each r In matchingRows
    volumeProduct = GetCellVal(xlWs, CLng(r), "ACTUAL FINISH PRODUCT", "TOTAL ACTUAL", 7, 10)
    
    Debug.Print "Row source: " & r & _
                " | Plant: " & plantLabel & _
                " | VolumeProduct(raw): " & volumeProduct & _
                " | Rounded: " & Round(volumeProduct / 1000, 0) & " MT"
    
    ' Tulis header plant dulu
    wsDest.Cells(row, 1).Value = plantLabel
    row = row + 1
    
    If volumeProduct > 0 Then
        wsDest.Cells(row, 1).Value = "Glycerine HDPE Drum/IBC = " & Round(volumeProduct / 1000, 0) & " MT"
    Else
        wsDest.Cells(row, 1).Value = "Stop Plant (fit to PPIC Planning)"
    End If
    row = row + 1
Next r


        Else
            Debug.Print "Lewati sheet: " & xlWs.Name
        End If
    Next xlWs
    
    xlWb.Close False
    xlApp.Quit
    Set xlApp = Nothing
    
    MsgBox "GetFillingGlycerine selesai untuk " & Format(targetDay, "dd-mmm-yyyy")
    Exit Sub
    
ErrHandler:
    MsgBox "Error: " & Err.Description, vbCritical
    On Error Resume Next
    If Not xlWb Is Nothing Then xlWb.Close False
    If Not xlApp Is Nothing Then xlApp.Quit
End Sub


Function GetMatchingRowsByDate(ws As Worksheet, targetDate As Date) As Collection
        Dim i As Long, lastRow As Long
        Dim valDate As Variant, mergeVal As Variant
        Dim isEndOfMonth As Boolean, isStartOfMonth As Boolean
        Dim matches As New Collection
    
        lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).row
        isEndOfMonth = (Day(Date) = Day(DateSerial(Year(Date), Month(Date) + 1, 0)))
        isStartOfMonth = (Day(Date) = 1)
    
        For i = 10 To lastRow
            If ws.Cells(i, 1).MergeCells Then
                mergeVal = ws.Cells(i, 1).MergeArea.Cells(1, 1).Value
            Else
                mergeVal = ws.Cells(i, 1).Value
            End If
    
            If IsDate(mergeVal) Then
                valDate = DateValue(mergeVal)
                If valDate = targetDate Then
                    If isEndOfMonth And i >= 150 Then
                        matches.Add i
                    ElseIf Not isEndOfMonth Then
                        matches.Add i
                    End If
                End If
            End If
        Next i
    
        Set GetMatchingRowsByDate = matches
    End Function
Function GetCellVal(ws As Worksheet, rowNum As Long, header1 As String, header2 As String, _
                    Optional searchRowStart As Long = 1, Optional searchRowEnd As Long = 20) As Double
    Dim colTarget As Long
    Dim val As Variant
    Dim f As Variant
    Dim cell As Range

    ' Panggil FindHeaderColumn versi baru (header tetap di row 7-9 / sub-header row 10)
    colTarget = FindHeaderColumn(ws, header1, header2)

    If colTarget = 0 Then
        GetCellVal = 0
        Debug.Print "=== GetCellVal Debug ==="
        Debug.Print "Worksheet   : " & ws.Name
        Debug.Print "Cari header : " & header1 & " + " & header2
        Debug.Print "Row target  : " & rowNum
        Debug.Print "Header tidak ditemukan, return 0"
        Debug.Print "========================"
        Exit Function
    End If

    Set cell = ws.Cells(rowNum, colTarget)
    If cell.MergeCells Then Set cell = cell.MergeArea.Cells(1, 1) ' ambil top-left kalau merge

    On Error Resume Next
    f = cell.Formula
    If Err.Number <> 0 Then
        Debug.Print "GetCellVal: error baca .Formula -> " & Err.Description
        Err.Clear
    End If
    On Error GoTo 0

    ' Debug info
    Debug.Print "=== GetCellVal Debug ==="
    Debug.Print "Worksheet   : " & ws.Name
    Debug.Print "Cari header : " & header1 & " + " & header2
    Debug.Print "Row target  : " & rowNum
    Debug.Print "Col target  : " & colTarget
    Debug.Print "Cell address: " & cell.Address
    Debug.Print "Formula     : " & CStr(f)

    ' Kalau ada formula, coba Evaluate; kalau error fallback ke Value2
    If Len(CStr(f)) > 0 And Left$(CStr(f), 1) = "=" Then
        On Error Resume Next
        val = ws.Evaluate(Mid$(CStr(f), 2))
        If Err.Number <> 0 Then
            Debug.Print "GetCellVal: Evaluate gagal -> fallback ke Value2"
            Err.Clear
            val = cell.Value2
        End If
        On Error GoTo 0
        Debug.Print "Evaluate val: " & CStr(val)
    Else
        val = cell.Value2
        Debug.Print "Raw val     : " & CStr(val)
    End If

    If IsNumeric(val) Then
        GetCellVal = CDbl(val)
        Debug.Print "Value (num) : " & GetCellVal
    Else
        GetCellVal = 0
        Debug.Print "Value bukan angka, return 0"
    End If
    Debug.Print "========================"
End Function









    
Function GetTextVal(ws As Worksheet, row As Long, h1Text As String, h2Text As String, h1Row As Long, h2Row As Long) As String
        Dim lastCol As Long, col As Long, h1 As String, h2 As String
        lastCol = ws.Cells(h1Row, ws.Columns.Count).End(xlToLeft).Column
        For col = 2 To lastCol
            h1 = LCase(Trim(ws.Cells(h1Row, col).MergeArea.Cells(1, 1).Value))
            h2 = LCase(Trim(ws.Cells(h2Row, col).Value))
            If h1 = LCase(h1Text) And h2 = LCase(h2Text) Then
                GetTextVal = CStr(ws.Cells(row, col).Value)
                Exit Function
            End If
        Next col
        GetTextVal = ""
    End Function

Function FindHeaderColumn(ws As Worksheet, header1 As String, header2 As String) As Long
    Dim c As Long, lastCol As Long
    Dim h1 As String, h2 As String
    
    FindHeaderColumn = 0
    lastCol = ws.Cells(10, ws.Columns.Count).End(xlToLeft).Column
    
    For c = 1 To lastCol
        ' --- ambil header utama (row 7-9 merge) ---
        If ws.Cells(7, c).MergeCells Then
            h1 = Trim(ws.Cells(7, c).MergeArea.Cells(1, 1).Value)
        Else
            h1 = Trim(ws.Cells(7, c).Value)
        End If
        
        ' --- ambil sub-header (row 10) ---
        If ws.Cells(10, c).MergeCells Then
            h2 = Trim(ws.Cells(10, c).MergeArea.Cells(1, 1).Value)
        Else
            h2 = Trim(ws.Cells(10, c).Value)
        End If
        
        Debug.Print "Scan col=" & c & _
                    " | H1='" & h1 & "' | H2='" & h2 & "'"
        
        ' --- jika cocok ---
        If LCase(h1) = LCase(header1) And LCase(h2) = LCase(header2) Then
            FindHeaderColumn = c
            Debug.Print ">>> Header match: '" & header1 & " + " & header2 & "' di Kolom " & c
            Exit Function
        End If
    Next c
    
    If FindHeaderColumn = 0 Then
        Debug.Print "Header tidak ditemukan: " & header1 & " + " & header2
    End If
End Function



Function GetDisplayedNumber(ws As Worksheet, rowNum As Long, colNum As Long) As Double
    Dim disp As String
    disp = Trim(ws.Cells(rowNum, colNum).Text) ' ambil angka yang tampil di layar
    
    Debug.Print "=== GetDisplayedNumber Debug ==="
    Debug.Print "Worksheet   : " & ws.Name
    Debug.Print "Cell addr   : " & ws.Cells(rowNum, colNum).Address
    Debug.Print "Displayed   : " & disp
    
    If IsNumeric(disp) Then
        GetDisplayedNumber = CDbl(disp)
        Debug.Print "Converted   : " & GetDisplayedNumber
    Else
        GetDisplayedNumber = 0
        Debug.Print "Bukan angka, return 0"
    End If
    Debug.Print "========================"
End Function

