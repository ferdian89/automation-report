Function GetAttachment_CBS(Optional targetDate As Date) As String
    Dim olApp As Object, olNs As Object, olFolder As Object
    Dim olItems As Object, olMail As Object, olAtmt As Object
    Dim fileName As String, savePath As String

    fileName = "02. Report Daily CBS HO Agustus 2025.xlsx"
    savePath = Environ("TEMP") & "\" & fileName
    If targetDate = 0 Then targetDate = Date - 1 ' default: kemarin

    Set olApp = GetObject(, "Outlook.Application")
    Set olNs = olApp.GetNamespace("MAPI")
    Set olFolder = olNs.GetDefaultFolder(6) ' Inbox
    Set olItems = olFolder.Items
    olItems.Sort "ReceivedTime", True

    For Each olMail In olItems
        If TypeName(olMail) = "MailItem" Then
            If Int(olMail.ReceivedTime) = Date Then ' Email hari ini
                If InStr(1, olMail.senderName, "Putri Yolla Safitri", vbTextCompare) > 0 Then
                    For Each olAtmt In olMail.Attachments
                        If olAtmt.fileName = fileName Then
                            On Error Resume Next: Kill savePath: On Error GoTo 0
                            olAtmt.SaveAsFile savePath
                            GetAttachment_CBS = savePath
                            Exit Function
                        End If
                    Next
                End If
            End If
        End If
    Next

    GetAttachment_CBS = ""
End Function


Sub GetCBSPlant()
    Dim tempFile As String
    Dim xlApp As Object, xlWb As Object, xlWs As Worksheet
    Dim wsDest As Worksheet
    Dim targetDate As Date, searchValueDate As Date
    Dim lastDataRow As Long, lastRow As Long
    Dim i As Long, maxCol As Long
    Dim inputCol As Long, prodCol As Long, descColBX As Long, descColCN As Long
    Dim foundProdCol As Boolean, foundInputCol As Boolean
    Dim inputProcessedTotal As Double
    Dim dictProducts As Object, dictDescriptions As Object
    Dim prod As String, desc1 As String, desc2 As String, descCombined As String, key As Variant
    Dim joinedProducts As String, joinedDescriptions As String
    Dim sheetName As String, currentLabel As String
    Dim headerRow1 As Long, headerRow2 As Long

    Set dictProducts = CreateObject("Scripting.Dictionary")
    Set dictDescriptions = CreateObject("Scripting.Dictionary")

    targetDate = Date - 1
    searchValueDate = targetDate
    sheetName = Format(searchValueDate, "dd-mm-yyyy")

    ' Buat worksheet tujuan
    On Error Resume Next
    Set wsDest = ThisWorkbook.Sheets(sheetName)
    If wsDest Is Nothing Then
        Set wsDest = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsDest.Name = sheetName
    End If
    On Error GoTo 0

    ' Ambil file dari email
    tempFile = GetAttachment_CBS(searchValueDate)
    If tempFile = "" Then
        MsgBox "File tidak ditemukan.", vbExclamation
        Exit Sub
    End If

    Set xlApp = CreateObject("Excel.Application")
    xlApp.Visible = False
    Set xlWb = xlApp.Workbooks.Open(tempFile, ReadOnly:=True)

    ' Loop setiap sheet
    For Each xlWs In xlWb.Sheets
        inputProcessedTotal = 0
        Set dictProducts = CreateObject("Scripting.Dictionary")
        Set dictDescriptions = CreateObject("Scripting.Dictionary")
        foundInputCol = False: foundProdCol = False
        descColBX = 76: descColCN = 92

        ' =================== SCD CBS ===================
If LCase(xlWs.Name) Like "*scd-cbs*" Then
    Debug.Print "Sheet SCD-CBS ditemukan: " & xlWs.Name
    currentLabel = "SCD CBS Plant"
    
    maxCol = xlWs.Cells(8, xlWs.Columns.Count).End(xlToLeft).Column
    lastDataRow = xlWs.Cells(xlWs.Rows.Count, 1).End(xlUp).row
    Debug.Print "maxCol: " & maxCol & ", lastDataRow: " & lastDataRow

    For i = 1 To maxCol
        If Trim(xlWs.Cells(8, i).MergeArea.Cells(1, 1).Value) = "Product" And _
           Trim(xlWs.Cells(9, i).Value) = "Refined" Then
            prodCol = i
            foundProdCol = True
            Debug.Print "Product column found at: " & prodCol
        End If

        If Trim(xlWs.Cells(8, i).MergeArea.Cells(1, 1).Value) = "Input Processed" And _
           Trim(xlWs.Cells(9, i).Value) = "Kg" Then
            inputCol = i
            foundInputCol = True
            Debug.Print "Input Processed column found at: " & inputCol
        End If
    Next i

    For i = 1 To lastDataRow
        If IsDate(xlWs.Cells(i, 1).Value) Then
            If Int(xlWs.Cells(i, 1).Value) = Int(searchValueDate) Then
                Debug.Print "Matching date found at row: " & i

                If foundProdCol Then
                    prod = Trim(xlWs.Cells(i, prodCol).Value)
                    If prod <> "" And Not dictProducts.Exists(prod) Then
                        dictProducts.Add prod, True
                        Debug.Print "Added product: " & prod
                    End If
                End If

                If foundInputCol And IsNumeric(xlWs.Cells(i, inputCol).Value) Then
                    inputProcessedTotal = inputProcessedTotal + CDbl(xlWs.Cells(i, inputCol).Value)
                    Debug.Print "Input Processed value added: " & xlWs.Cells(i, inputCol).Value
                End If

                desc1 = Trim(xlWs.Cells(i, descColBX).Value)
                desc2 = Trim(xlWs.Cells(i, descColCN).Value)
                descCombined = JoinDescriptions(desc1, desc2)
                
                If descCombined <> "" And Not dictDescriptions.Exists(descCombined) Then
                    dictDescriptions.Add descCombined, True
                    Debug.Print "Added description: " & descCombined
                End If
            End If
        End If
    Next i
End If


        ' =================== Hydro 2 ===================
       If LCase(xlWs.Name) Like "*hydro 2*" Then
    Debug.Print "Processing sheet: " & xlWs.Name
    currentLabel = "HYD CBS"
    headerRow1 = 5
    headerRow2 = 6
    descColBX = 48

    maxCol = xlWs.Cells(headerRow1, xlWs.Columns.Count).End(xlToLeft).Column
    lastDataRow = xlWs.Cells(xlWs.Rows.Count, 1).End(xlUp).row

    Debug.Print "Header rows at: " & headerRow1 & " and " & headerRow2
    Debug.Print "Max column: " & maxCol & ", Last data row: " & lastDataRow

    For i = 1 To maxCol
        If Trim(xlWs.Cells(headerRow1, i).MergeArea.Cells(1, 1).Value) = "Product" Then
            If LCase(Trim(xlWs.Cells(headerRow2, i).Value)) Like "*quality*" Or _
               LCase(Trim(xlWs.Cells(headerRow2, i).Value)) Like "*refined*" Then
                prodCol = i: foundProdCol = True
                Debug.Print "Found Product column at: " & prodCol
            End If
        End If
        If Trim(xlWs.Cells(headerRow1, i).MergeArea.Cells(1, 1).Value) = "Input processed" And _
           LCase(Trim(xlWs.Cells(headerRow2, i).Value)) = "kg" Then
            inputCol = i: foundInputCol = True
            Debug.Print "Found Input Processed column at: " & inputCol
        End If
    Next i

    For i = 1 To lastDataRow
        If IsDate(xlWs.Cells(i, 1).Value) Then
            If Int(xlWs.Cells(i, 1).Value) = Int(searchValueDate) Then
                Debug.Print "Row " & i & " matches target date: " & searchValueDate

                If foundProdCol Then
                    prod = Trim(xlWs.Cells(i, prodCol).Value)
                    If prod <> "" And Not dictProducts.Exists(prod) Then
                        dictProducts.Add prod, True
                        Debug.Print "Added product: " & prod
                    End If
                End If
                If foundInputCol And IsNumeric(xlWs.Cells(i, inputCol).Value) Then
                    inputProcessedTotal = inputProcessedTotal + CDbl(xlWs.Cells(i, inputCol).Value)
                    Debug.Print "Added input processed: " & xlWs.Cells(i, inputCol).Value
                End If
                desc1 = Trim(xlWs.Cells(i, descColBX).Value)
                If desc1 <> "" And Not dictDescriptions.Exists(desc1) Then
                    dictDescriptions.Add desc1, True
                    Debug.Print "Added description: " & desc1
                End If
            End If
        End If
    Next i
End If


        ' =================== PKO FRACT ===================
       If LCase(xlWs.Name) Like "pko-fract*" Then
    Debug.Print "Processing sheet:", xlWs.Name

    currentLabel = "PKO-FRACT Plant"
    headerRow1 = 8
    headerRow2 = 9
    descColBX = 48
    descColCN = 92

    maxCol = xlWs.Cells(headerRow1, xlWs.Columns.Count).End(xlToLeft).Column
    lastDataRow = xlWs.Cells(xlWs.Rows.Count, 1).End(xlUp).row

    Debug.Print "Max column:", maxCol
    Debug.Print "Last data row:", lastDataRow

    For i = 1 To maxCol
        Dim hdrVal As String, subHdrVal As String
        hdrVal = Trim(xlWs.Cells(headerRow1, i).MergeArea.Cells(1, 1).Value)
        subHdrVal = LCase(Trim(xlWs.Cells(headerRow2, i).Value))

        If hdrVal = "Product" Then
            If subHdrVal Like "*fractination*" Or subHdrVal Like "*refined*" Then
                prodCol = i
                foundProdCol = True
                Debug.Print "Found Product column at:", i
            End If
        End If

        If hdrVal = "CPKO Input" And subHdrVal = "kg" Then
            inputCol = i
            foundInputCol = True
            Debug.Print "Found Input Processed column at:", i
        End If
    Next i

    For i = 1 To lastDataRow
        If IsDate(xlWs.Cells(i, 1).Value) Then
            If Int(xlWs.Cells(i, 1).Value) = Int(searchValueDate) Then
                Debug.Print "Processing row:", i, "Date matched:", xlWs.Cells(i, 1).Value

                If foundProdCol Then
                    prod = Trim(xlWs.Cells(i, prodCol).Value)
                    If prod <> "" And Not dictProducts.Exists(prod) Then
                        dictProducts.Add prod, True
                        Debug.Print "Added Product:", prod
                    End If
                End If

                If foundInputCol And IsNumeric(xlWs.Cells(i, inputCol).Value) Then
                    inputProcessedTotal = inputProcessedTotal + CDbl(xlWs.Cells(i, inputCol).Value)
                    Debug.Print "Added Input Processed:", xlWs.Cells(i, inputCol).Value
                End If

                desc1 = Trim(xlWs.Cells(i, descColBX).Value)
                If desc1 <> "" And Not dictDescriptions.Exists(desc1) Then
                    dictDescriptions.Add desc1, True
                    Debug.Print "Added Description BX:", desc1
                End If

                desc2 = Trim(xlWs.Cells(i, descColCN).Value)
                If desc2 <> "" And Not dictDescriptions.Exists(desc2) Then
                    dictDescriptions.Add desc2, True
                    Debug.Print "Added Description CN:", desc2
                End If
            End If
        End If
    Next i
End If

                ' Gabungkan hasil dan tulis ke worksheet
        joinedProducts = JoinDictionaryKeys(dictProducts)
        joinedDescriptions = JoinDictionaryKeys(dictDescriptions)
        lastRow = wsDest.Cells(wsDest.Rows.Count, 1).End(xlUp).row + 2

        wsDest.Cells(lastRow, 1).Value = currentLabel
        If inputProcessedTotal > 0 Then
            wsDest.Cells(lastRow + 1, 1).Value = "Running : " & IIf(joinedProducts <> "", joinedProducts, "-")
            wsDest.Cells(lastRow + 2, 1).Value = "Input Processed : " & Format(inputProcessedTotal / 1000, "0") & " Ton"
            If joinedDescriptions <> "" Then
                wsDest.Cells(lastRow + 3, 1).Value = "Description : " & joinedDescriptions
            End If
        Else
            wsDest.Cells(lastRow + 1, 1).Value = "Stop Plant"
            wsDest.Cells(lastRow + 2, 1).Value = "Fit to PPIC Planning"
        End If
NextSheet:
    Next xlWs

    xlWb.Close False
    xlApp.Quit
    Set xlApp = Nothing: Set xlWb = Nothing

    MsgBox "Output CBS berhasil ditulis.", vbInformation
End Sub

Function JoinDescriptions(desc1 As String, desc2 As String) As String
    If desc1 <> "" And desc2 <> "" Then
        JoinDescriptions = desc1 & ", " & desc2
    ElseIf desc1 <> "" Then
        JoinDescriptions = desc1
    Else
        JoinDescriptions = desc2
    End If
End Function

Function JoinDictionaryKeys(dict As Object) As String
    Dim key As Variant, result As String
    For Each key In dict.Keys
        result = result & IIf(result <> "", ", ", "") & key
    Next
    JoinDictionaryKeys = result
End Function

